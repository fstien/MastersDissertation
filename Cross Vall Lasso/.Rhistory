600*x[2] + 50*x3 - 15000)
})
con = function(x) {
x1 <- x[1]; x3 <- x[3]
c(600*x1 - 50*x3 - x1*x3 + 5000,
600*x[2] + 50*x3 - 15000)
}
con(c(1,2,3))
for(d in seq(5,30,5)) {
print(d)
}
for(d in seq(5,15,5)) {
print(d)
}
wDF <- as.data.frame(read_csv(file = "wDF5.csv"))
library(caret)
library(caret)
library(DEoptimR)
library(parallel)
library(foreach)
library(doParallel)
wDF <- as.data.frame(read_csv(file = "wDF5.csv"))
library(readr)
wDF <- as.data.frame(read_csv(file = "wDF5.csv"))
wDF5 <- as.data.frame(read_csv(file = "wDF5.csv"))
d
wDF5 <- as.data.frame(read_csv(file = paste("out", d, ".csv", sep="")))
df
wDF
wDF <- NULL
wDF
getSS <- function(wDF) {
# Add the columns of positive weights
for(i in 1:length(ctry)) {
wDF[paste("w0", ctry[i], sep="")] <- 0
}
colnames(wDF)
# Add up the no-shortsale wegiths
for(i in 1:length(ctry)) {
wDF[31, paste("w", ctry[i], sep="")]
}
for(t in (winSize+1):nrow(wDF)) {
# Add up the positive wegiths
sumMax <- 0
for(i in 1:length(ctry)) {
if(wDF[t, paste("w", ctry[i], sep="")] > 0) {
sumMax <- sumMax + wDF[t, paste("w", ctry[i], sep="")]
}
}
# Plug in adjusted weights when they are positive
for(i in 1:length(ctry)) {
if(wDF[t, paste("w", ctry[i], sep="")] > 0) {
wDF[t, paste("w0", ctry[i], sep="")] <- wDF[t, paste("w", ctry[i], sep="")] / sumMax
}
}
}
# Compute PPP no shortsale returns
wDF$r0PPP <- wDF$u0 <- 0
for(t in (winSize+1):nrow(wDF)) {
#Loop over the countries
Rpt <- 0
for ( c in seq(4, (ncol(df)-length(ctry)), (nCat+2) )  ) {
#print( c(colnames(df)[(c-1)], df[t,c] ) )
#print( wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] )
if(wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] > 0 ) {
#print( c("w", wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] ))
Rpt <- Rpt + as.numeric(wDF[t, paste("w0",colnames(df)[(c-1)],sep="")])*df[t,c]
}
}
wDF$r0PPP[t] <- Rpt
wDF$u0[t] <- u(Rpt, gamma)
}
out <- mean(wDF$r0PPP)
return(out)
}
d
wDFd <- as.data.frame(read_csv(file = paste("out", d, ".csv", sep="")))
getSS(wDFd)
load("work.Rdata")
getSS(wDFd)
wDF[t, paste("w", ctry[i], sep = "")]
wDF
wDF <- NULL
getSS(wDFd)
wDF <- as.data.frame(read_csv(file = paste("out", d, ".csv", sep="")))
wDF
wDF <- as.data.frame(read_csv(file = paste("wDF", d, ".csv", sep="")))
getSS(wDFd)
wDF
for(i in 1:length(ctry)) {
wDF[paste("w0", ctry[i], sep="")] <- 0
}
colnames(wDF)
for(i in 1:length(ctry)) {
wDF[31, paste("w", ctry[i], sep="")]
}
for(t in (winSize+1):nrow(wDF)) {
# Add up the positive wegiths
sumMax <- 0
for(i in 1:length(ctry)) {
if(wDF[t, paste("w", ctry[i], sep="")] > 0) {
sumMax <- sumMax + wDF[t, paste("w", ctry[i], sep="")]
}
}
# Plug in adjusted weights when they are positive
for(i in 1:length(ctry)) {
if(wDF[t, paste("w", ctry[i], sep="")] > 0) {
wDF[t, paste("w0", ctry[i], sep="")] <- wDF[t, paste("w", ctry[i], sep="")] / sumMax
}
}
}
wDF$r0PPP <- wDF$u0 <- 0
for(t in (winSize+1):nrow(wDF)) {
#Loop over the countries
Rpt <- 0
for ( c in seq(4, (ncol(df)-length(ctry)), (nCat+2) )  ) {
#print( c(colnames(df)[(c-1)], df[t,c] ) )
#print( wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] )
if(wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] > 0 ) {
#print( c("w", wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] ))
Rpt <- Rpt + as.numeric(wDF[t, paste("w0",colnames(df)[(c-1)],sep="")])*df[t,c]
}
}
wDF$r0PPP[t] <- Rpt
wDF$u0[t] <- u(Rpt, gamma)
}
out <- mean(wDF$r0PPP)
getSS(wDF)
for(d in seq(5,15,5)) {
print(d)
wDF <- as.data.frame(read_csv(file = paste("wDF", d, ".csv", sep="")))
print(getSS(wDF))
}
for(d in seq(5,15,5)) {
wDF <- as.data.frame(read_csv(file = paste("wDF", d, ".csv", sep="")))
print(d)
print(getSS(wDF))
}
d <- 5
wDF <- as.data.frame(read_csv(file = paste("wDF", d, ".csv", sep="")))
sqVal <- c()
for(t in (winSize+1):nrow(wDF)) {
sqVal <- c(sqVal, sum(wDF[t,3:54]^2))
}
plot(density(sqVal))
plot(density(sqVal, adjust=0.1))
plot(density(sqVal, adjust=0.01))
sqVal
d <- 10
wDF <- as.data.frame(read_csv(file = paste("wDF", d, ".csv", sep="")))
sqVal <- c()
for(t in (winSize+1):nrow(wDF)) {
sqVal <- c(sqVal, sum(wDF[t,3:54]^2))
}
plot(density(sqVal, adjust=0.01))
d <- 15
sqVal <- c()
for(t in (winSize+1):nrow(wDF)) {
sqVal <- c(sqVal, sum(wDF[t,3:54]^2))
}
plot(density(sqVal, adjust=0.01))
wDF <- as.data.frame(read_csv(file = paste("wDF", d, ".csv", sep="")))
sqVal <- c()
for(t in (winSize+1):nrow(wDF)) {
sqVal <- c(sqVal, sum(wDF[t,3:54]^2))
}
plot(density(sqVal, adjust=0.01))
for(d in 1:1) { print(d) }
meanU
ridgeFold <- data.frame(d <- seq(5,30,5), SR <- rep(0,6))
colnames(ridgeFold) <- c("d", "SR")
rownames(ridgeFold) <- ridgeFold$d
ridgeFold
setwd("/Users/francois/Dropbox/Francois dissertation/PPPAWS")
wDF <- as.data.frame(read_csv(file = "PPPFinal.csv"))
plot(wDF$r0PPP[winSize:nrow(wDF)], type="l")
# Add the columns of positive weights
for(i in 1:length(ctry)) {
wDF[paste("w0", ctry[i], sep="")] <- 0
}
colnames(wDF)
# Add up the no-shortsale wegiths
for(i in 1:length(ctry)) {
wDF[31, paste("w", ctry[i], sep="")]
}
for(t in (winSize+1):nrow(wDF)) {
# Add up the positive wegiths
sumMax <- 0
for(i in 1:length(ctry)) {
if(wDF[t, paste("w", ctry[i], sep="")] > 0) {
sumMax <- sumMax + wDF[t, paste("w", ctry[i], sep="")]
}
}
# Plug in adjusted weights when they are positive
for(i in 1:length(ctry)) {
if(wDF[t, paste("w", ctry[i], sep="")] > 0) {
wDF[t, paste("w0", ctry[i], sep="")] <- wDF[t, paste("w", ctry[i], sep="")] / sumMax
}
}
}
# Compute PPP no shortsale returns
wDF$r0PPP <- wDF$u0 <- 0
for(t in (winSize+1):nrow(wDF)) {
#Loop over the countries
Rpt <- 0
for ( c in seq(4, (ncol(df)-length(ctry)), (nCat+2) )  ) {
#print( c(colnames(df)[(c-1)], df[t,c] ) )
#print( wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] )
if(wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] > 0 ) {
#print( c("w", wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] ))
Rpt <- Rpt + as.numeric(wDF[t, paste("w0",colnames(df)[(c-1)],sep="")])*df[t,c]
}
}
wDF$r0PPP[t] <- Rpt
wDF$u0[t] <- u(Rpt, gamma)
}
# Compute the PPP no shortsale cumulative return
wDF$PPP0 <- 1
for(t in (winSize+1):nrow(wDF)) {
wDF$PPP0[t] <- (1 + wDF$r0PPP[t])*wDF$PPP0[(t-1)]
}
# Turnover
# For PPP
wDF$PPPTurn <- 0
for(t in (winSize+2):nrow(wDF)) {
Tt <- 0
for(i in 1:length(ctry)) {
Tt <- Tt + abs(wDF[t, paste("w", ctry[i], sep="")] -  wDF[(t-1), paste("w", ctry[i], sep="")])
}
wDF$PPPTurn[t] <- Tt
}
# For no shortsale PPP
wDF$PPP0Turn <- 0
for(t in (winSize+2):nrow(wDF)) {
Tt <- 0
for(i in 1:length(ctry)) {
Tt <- Tt + abs(wDF[t, paste("w0", ctry[i], sep="")] -  wDF[(t-1), paste("w0", ctry[i], sep="")])
}
wDF$PPP0Turn[t] <- Tt
}
# Find the CEQ return for shortsale constrained PPP
averageUtility <- mean(wDF$u0[(winSize+1):nrow(wDF)])
UInverse <- function(par) {
out <- (u(par,gamma) - averageUtility)^2
return(out)
}
# CEQ return is R such that u(R) = averageUtility
CEQ0 <- optim(par = mean(wDF$r0PPP[(winSize+1):nrow(wDF)]), fn = UInverse, method=c("Brent"), lower=-1, upper=1)
u(CEQ0$par, gamma)
plot(wDF$r0PPP[winSize:nrow(wDF)], type="l")
mean(wDF$r0PPP[winSize:nrow(wDF)])
for(d in seq(5,15,5)) {
wDF <- as.data.frame(read_csv(file = paste("wDF", d, ".csv", sep="")))
print(d)
print(getSS(wDF))
}
rm(list = ls())
library(DEoptimR)
library(parallel)
library(foreach)
library(doParallel)
set.seed(1234)
load("work.Rdata")
meanUOptim <- function(par) {
# Add a column of utilities
dft$u <- 0
# Loop over every period
for(t in 1:nrow(dft)) {
# Define the period-t return
Rpt <- 0
# The vector of countries in period t
ctryT <- c()
# Loop over the countries
for ( c in seq(4, (ncol(dft)-length(ctry)), (nCat+2) )  ) {
# Only for currencies in period t
if(dft[t,c] != 0) {
ctryT <- c(ctryT, colnames(dft)[(c-1)])
}
}
#Loop over the countries
for ( c in seq(4, (ncol(dft)-length(ctry)), (nCat+2) )  ) {
if(colnames(dft)[(c-1)] %in% ctryT) {
#Get the weight of country c
wC <- ( 1/length(ctryT) + ( (1/length(ctryT))*( t(as.matrix(par)) %*% as.numeric(dft[t,c:(c+nCat-1)]) ) ) )
# Add to the the periot t return with multiplying by period t return
Rpt <- Rpt + wC*dft[t,c]
}
}
dft$u[t] <- u(Rpt, gamma)
}
out <- -mean(dft$u)
return(out)
}
consRidge <- function(par) {
c(sum(par^2) - 5)
}
t
t <-31
dft <- df[(t-winSize):(t-1),]
set.seed(1234)
theta <- JDEoptim(rep(-1, nCat), rep(1, nCat), fn=meanUOptim, constr=consRidge, maxiter=60), trace = TRUE, triter = 1) # JDEoptim(rep(-1, nCat), rep(1, nCat), fn=meanUOptim, constr=consRidge, maxiter=50)
theta <- JDEoptim(rep(-1, nCat), rep(1, nCat), fn=meanUOptim, constr=consRidge, maxiter=60 , trace = TRUE, triter = 1) # JDEoptim(rep(-1, nCat), rep(1, nCat), fn=meanUOptim, constr=consRidge, maxiter=50)
load("work.Rdata")
flds
flds
set.seed(1234)
setwd("/Users/francois/Dropbox/Francois dissertation/CrossValLassoAWS")
load("work.Rdata")
flds
library(caret)
library(DEoptimR)
library(parallel)
library(foreach)
library(doParallel)
set.seed(1234)
load("work.Rdata")
winSize
nrow(wDF)
meanUOptim <- function(par) {
# Add a column of utilities
dft$u <- 0
# Loop over every period
for(t in 1:nrow(dft)) {
# Define the period-t return
Rpt <- 0
# The vector of countries in period t
ctryT <- c()
# Loop over the countries
for ( c in seq(4, (ncol(dft)-length(ctry)), (nCat+2) )  ) {
# Only for currencies in period t
if(dft[t,c] != 0) {
ctryT <- c(ctryT, colnames(dft)[(c-1)])
}
}
#Loop over the countries
for ( c in seq(4, (ncol(dft)-length(ctry)), (nCat+2) )  ) {
if(colnames(dft)[(c-1)] %in% ctryT) {
#Get the weight of country c
wC <- ( 1/length(ctryT) + ( (1/length(ctryT))*( t(as.matrix(par)) %*% as.numeric(dft[t,c:(c+nCat-1)]) ) ) )
# Add to the the periot t return with multiplying by period t return
Rpt <- Rpt + wC*dft[t,c]
}
}
dft$u[t] <- u(Rpt, gamma)
}
out <- -mean(dft$u)
#print(out)
return(out)
}
n <- nrow(wDF)
k <- 8
flds
getwd()
d
detectCores()-1
library(caret)
library(DEoptimR)
library(parallel)
library(foreach)
library(doParallel)
detectCores()
cl <- makeCluster(k)
cl
stopCluster(cl)
cl <- makeCluster(k)
registerDoParallel(cl, cores = k)
stopCluster(cl)
cl <- makeCluster(k)
registerDoParallel(cl, cores = k)
stopCluster(cl)
library(caret)
library(DEoptimR)
library(parallel)
library(foreach)
library(doParallel)
set.seed(1234)
load("work.Rdata")
flds
wDF
wDF$Gdp
```{r}
library(readr)
set.seed(1234)
load("work.Rdata")
```
library(readr)
set.seed(1234)
load("work.Rdata")
out5 <- as.data.frame(read_csv(file = paste("out", 5, ".csv", sep="")))
out5
out[1]
out[1,]
out5
out5[1,]
for(i in 1:8) {
print(sum(abs(out[i,])))
}
for(i in 1:8) {
print(sum(abs(out5[i,])))
}
print(out5[i,]^2)
for(i in 1:8) {
print(sum(out5[i,]^2))
}
out5 <- as.data.frame(read_csv(file = paste("out", 10, ".csv", sep="")))
out5
for(i in 1:8) {
print(sum(abs(out5[i,])))
}
for(i in 1:8) {
print(sum(out5[i,]^2))
}
for(i in 1:8) {
print(sum(abs(out5[i,])))
}
for(d in seqRidge) {
print(d)
print(getSS(out))
}
getSS <- function(outInput) {
# Clear the wDF dataframe
wDF[,3:ncol(wDF)] <- 0
# Write weights to data frame
for(i in 1:k) {
validate <- flds[paste("Fold", i, sep="")]
validate <- unlist(validate, use.names=FALSE)
for(t in validate) {
wDF[t,(3:54)] <- outInput[i,]
}
}
# Compute PPP weights, returns and utilities
wDF$rPPP <- wDF$u <- 0
for(t in 1:nrow(wDF)) {
# The vector of countries in period t
ctryT <- c()
# Loop over the countries
for ( c in seq(4, (ncol(df)-length(ctry)), (nCat+2) )  ) {
# Only for currencies in period t
if(df[t,c] != 0) {
ctryT <- c(ctryT, colnames(df)[(c-1)])
}
}
#Loop over the countries
Rpt <- 0
for ( c in seq(4, (ncol(df)-length(ctry)), (nCat+2) )  ) {
if(colnames(df)[(c-1)] %in% ctryT) {
#Get the weight of country c
wDF[t, paste("w",colnames(df)[(c-1)],sep="")] <- ( 1/length(ctryT) + ( (1/length(ctryT))* (t(as.matrix(as.numeric(wDF[t,3:(nCat+2)]))) %*% as.numeric(df[t,c:(c+nCat-1)]))) )
# Add to the the periot t return with multiplying by period t return
Rpt <- Rpt + as.numeric(wDF[t, paste("w",colnames(df)[(c-1)],sep="")])*df[t,c]
}
}
wDF$rPPP[t] <- Rpt
wDF$u[t] <- u(Rpt, gamma)
}
# Add the columns of positive weights
for(i in 1:length(ctry)) {
wDF[paste("w0", ctry[i], sep="")] <- 0
}
for(t in (winSize+1):nrow(wDF)) {
# Add up the positive wegiths
sumMax <- 0
for(i in 1:length(ctry)) {
if(wDF[t, paste("w", ctry[i], sep="")] > 0) {
sumMax <- sumMax + wDF[t, paste("w", ctry[i], sep="")]
}
}
# Plug in adjusted weights when they are positive
for(i in 1:length(ctry)) {
if(wDF[t, paste("w", ctry[i], sep="")] > 0) {
wDF[t, paste("w0", ctry[i], sep="")] <- wDF[t, paste("w", ctry[i], sep="")] / sumMax
}
}
}
# Compute PPP no shortsale returns
wDF$r0PPP <- wDF$u0 <- 0
for(t in (winSize+1):nrow(wDF)) {
#Loop over the countries
Rpt <- 0
for ( c in seq(4, (ncol(df)-length(ctry)), (nCat+2) )  ) {
#print( c(colnames(df)[(c-1)], df[t,c] ) )
#print( wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] )
if(wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] > 0 ) {
#print( c("w", wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] ))
Rpt <- Rpt + as.numeric(wDF[t, paste("w0",colnames(df)[(c-1)],sep="")])*df[t,c]
}
}
wDF$r0PPP[t] <- Rpt
wDF$u0[t] <- u(Rpt, gamma)
}
out <- mean(wDF$r0PPP)
return(out)
}
for(d in seqRidge) {
print(d)
print(getSS(out))
}
seqRidge <- c(5, 10, 15, 20)
for(d in seqRidge) {
out <- as.data.frame(read_csv(file = paste("out", d, ".csv", sep="")))
print(d)
print(getSS(out))
}
plot(density(out5,ajdust=0.01))
out5
plot(density(out5[1,],ajdust=0.01))
out5[1,]
as.vector(as.matrix(out5))
plot(density(as.vector(as.matrix(out5)),ajdust=0.01))
plot(density(as.vector(as.matrix(out5)),ajdust=0.001))
density(as.vector(as.matrix(out5)),ajdust=0.001)
plot(density(as.vector(as.matrix(out5)),adjust=0.001))
