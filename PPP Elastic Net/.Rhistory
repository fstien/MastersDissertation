library(DEoptimR)
library(parallel)
library(foreach)
library(doParallel)
set.seed(1234)
load("work.Rdata")
theta <- c()
theta$par <- t0
meanUOptim <- function(par) {
# Add a column of utilities
dft$u <- 0
# Loop over every period
for(t in 1:nrow(dft)) {
# Define the period-t return
Rpt <- 0
# The vector of countries in period t
ctryT <- c()
# Loop over the countries
for ( c in seq(4, (ncol(dft)-length(ctry)), (nCat+2) )  ) {
# Only for currencies in period t
if(dft[t,c] != 0) {
ctryT <- c(ctryT, colnames(dft)[(c-1)])
}
}
#Loop over the countries
for ( c in seq(4, (ncol(dft)-length(ctry)), (nCat+2) )  ) {
if(colnames(dft)[(c-1)] %in% ctryT) {
#Get the weight of country c
wC <- ( 1/length(ctryT) + ( (1/length(ctryT))*( t(as.matrix(par)) %*% as.numeric(dft[t,c:(c+nCat-1)]) ) ) )
# Add to the the periot t return with multiplying by period t return
Rpt <- Rpt + wC*dft[t,c]
}
}
dft$u[t] <- u(Rpt, gamma)
}
out <- -mean(dft$u)
return(out)
}
consElasticNet <- function(par) {
c(sum(par^2) - 5, sum(abs(par)) - 10)
}
t
t <- 32
dft <- df[(t-winSize):(t-1),]
set.seed(1234)
theta <- JDEoptim(rep(-1, nCat), rep(1, nCat), fn=meanUOptim, constr=consElasticNet, maxiter=500, trace = TRUE, triter = 1)
absVal <- c()
for(t in (winSize+1):nrow(wDF)) {
absVal <- c(absVal, sum(abs(wDF[t,3:54])))
}
for(t in (winSize+1):nrow(wDF)) {
absVal <- c(absVal, sum(abs(wDF[t,3:54])))
}
plot(density(absVal, adjust=0.01))
library(readxl)
library(plyr)
library(zoo)
library(forecast)
library(astsa)
library(DEoptim)
library(DEoptimR)
library(parallel)
library(foreach)
library(doParallel)
library(readr)
set.seed(1234)
rm(list=ls())
load("work.Rdata")
# To read a dataFrame
setwd("/Users/francois/Dropbox/Francois dissertation/PPPRidgeAWS")
wDF <- as.data.frame(read_csv(file = "PPPRidgeFinal.csv"))
wDF
# Add the columns of positive weights
for(i in 1:length(ctry)) {
wDF[paste("w0", ctry[i], sep="")] <- 0
}
colnames(wDF)
# Add up the no-shortsale wegiths
for(i in 1:length(ctry)) {
wDF[31, paste("w", ctry[i], sep="")]
}
for(t in (winSize+1):nrow(wDF)) {
# Add up the positive wegiths
sumMax <- 0
for(i in 1:length(ctry)) {
if(wDF[t, paste("w", ctry[i], sep="")] > 0) {
sumMax <- sumMax + wDF[t, paste("w", ctry[i], sep="")]
}
}
# Plug in adjusted weights when they are positive
for(i in 1:length(ctry)) {
if(wDF[t, paste("w", ctry[i], sep="")] > 0) {
wDF[t, paste("w0", ctry[i], sep="")] <- wDF[t, paste("w", ctry[i], sep="")] / sumMax
}
}
}
# Compute PPP no shortsale returns
wDF$r0PPP <- wDF$u0 <- 0
for(t in (winSize+1):nrow(wDF)) {
#Loop over the countries
Rpt <- 0
for ( c in seq(4, (ncol(df)-length(ctry)), (nCat+2) )  ) {
#print( c(colnames(df)[(c-1)], df[t,c] ) )
#print( wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] )
if(wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] > 0 ) {
#print( c("w", wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] ))
Rpt <- Rpt + as.numeric(wDF[t, paste("w0",colnames(df)[(c-1)],sep="")])*df[t,c]
}
}
wDF$r0PPP[t] <- Rpt
wDF$u0[t] <- u(Rpt, gamma)
}
# Compute the PPP no shortsale cumulative return
wDF$PPP0 <- 1
for(t in (winSize+1):nrow(wDF)) {
wDF$PPP0[t] <- (1 + wDF$r0PPP[t])*wDF$PPP0[(t-1)]
}
# Turnover
# For PPP
wDF$PPPTurn <- 0
for(t in (winSize+2):nrow(wDF)) {
Tt <- 0
for(i in 1:length(ctry)) {
Tt <- Tt + abs(wDF[t, paste("w", ctry[i], sep="")] -  wDF[(t-1), paste("w", ctry[i], sep="")])
}
wDF$PPPTurn[t] <- Tt
}
# For no shortsale PPP
wDF$PPP0Turn <- 0
for(t in (winSize+2):nrow(wDF)) {
Tt <- 0
for(i in 1:length(ctry)) {
Tt <- Tt + abs(wDF[t, paste("w0", ctry[i], sep="")] -  wDF[(t-1), paste("w0", ctry[i], sep="")])
}
wDF$PPP0Turn[t] <- Tt
}
# Find the CEQ return for shortsale constrained PPP
averageUtility <- mean(wDF$u0[(winSize+1):nrow(wDF)])
UInverse <- function(par) {
out <- (u(par,gamma) - averageUtility)^2
return(out)
}
# CEQ return is R such that u(R) = averageUtility
CEQ0 <- optim(par = mean(wDF$r0PPP[(winSize+1):nrow(wDF)]), fn = UInverse, method=c("Brent"), lower=-1, upper=1)
u(CEQ0$par, gamma)
# The Lasso constraint
absVal <- c()
for(t in (winSize+1):nrow(wDF)) {
absVal <- c(absVal, sum(abs(wDF[t,3:54])))
}
plot(density(absVal, adjust=0.01))
# The Ridge Constraint
sqVal <- c()
for(t in (winSize+1):nrow(wDF)) {
sqVal <- c(sqVal, sum(wDF[t,3:54]^2))
}
plot(density(sqVal, adjust=0.01))
mean(absVal)
sd(absVal)
# The Ridge Constraint
sqVal <- c()
for(t in (winSize+1):nrow(wDF)) {
sqVal <- c(sqVal, sum(wDF[t,3:54]^2))
}
plot(density(sqVal, adjust=0.01))
mean(sqVal)
sd(sqVal)
library(readxl)
library(readxl)
library(plyr)
library(forecast)
library(forecast)
library(astsa)
library(DEoptim)
library(DEoptimR)
library(DEoptimR)
library(parallel)
library(doParallel)
set.seed(1234)
rm(list=ls())
load("work.Rdata")
setwd("/Users/francois/Dropbox/Francois dissertation/PPPElasticNetAWS")
wDF <- as.data.frame(read_csv(file = "PPPElasticNetFinal.csv"))
library(readr)
wDF <- as.data.frame(read_csv(file = "PPPElasticNetFinal.csv"))
wDF
for(i in 1:length(ctry)) {
wDF[paste("w0", ctry[i], sep="")] <- 0
}
colnames(wDF)
for(t in (winSize+1):nrow(wDF)) {
# Add up the positive wegiths
sumMax <- 0
for(i in 1:length(ctry)) {
if(wDF[t, paste("w", ctry[i], sep="")] > 0) {
sumMax <- sumMax + wDF[t, paste("w", ctry[i], sep="")]
}
}
# Plug in adjusted weights when they are positive
for(i in 1:length(ctry)) {
if(wDF[t, paste("w", ctry[i], sep="")] > 0) {
wDF[t, paste("w0", ctry[i], sep="")] <- wDF[t, paste("w", ctry[i], sep="")] / sumMax
}
}
}
wDF$PPP0 <- 1
for(t in (winSize+1):nrow(wDF)) {
wDF$PPP0[t] <- (1 + wDF$r0PPP[t])*wDF$PPP0[(t-1)]
}
wDF$PPPTurn <- 0
wDF <- as.data.frame(read_csv(file = "PPPElasticNetFinal.csv"))
# Add the columns of positive weights
for(i in 1:length(ctry)) {
wDF[paste("w0", ctry[i], sep="")] <- 0
}
colnames(wDF)
# Add up the no-shortsale wegiths
for(i in 1:length(ctry)) {
wDF[31, paste("w", ctry[i], sep="")]
}
for(t in (winSize+1):nrow(wDF)) {
# Add up the positive wegiths
sumMax <- 0
for(i in 1:length(ctry)) {
if(wDF[t, paste("w", ctry[i], sep="")] > 0) {
sumMax <- sumMax + wDF[t, paste("w", ctry[i], sep="")]
}
}
# Plug in adjusted weights when they are positive
for(i in 1:length(ctry)) {
if(wDF[t, paste("w", ctry[i], sep="")] > 0) {
wDF[t, paste("w0", ctry[i], sep="")] <- wDF[t, paste("w", ctry[i], sep="")] / sumMax
}
}
}
# Compute PPP no shortsale returns
wDF$r0PPP <- wDF$u0 <- 0
for(t in (winSize+1):nrow(wDF)) {
#Loop over the countries
Rpt <- 0
for ( c in seq(4, (ncol(df)-length(ctry)), (nCat+2) )  ) {
#print( c(colnames(df)[(c-1)], df[t,c] ) )
#print( wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] )
if(wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] > 0 ) {
#print( c("w", wDF[t, paste("w0",colnames(df)[(c-1)],sep="")] ))
Rpt <- Rpt + as.numeric(wDF[t, paste("w0",colnames(df)[(c-1)],sep="")])*df[t,c]
}
}
wDF$r0PPP[t] <- Rpt
wDF$u0[t] <- u(Rpt, gamma)
}
# Compute the PPP no shortsale cumulative return
wDF$PPP0 <- 1
for(t in (winSize+1):nrow(wDF)) {
wDF$PPP0[t] <- (1 + wDF$r0PPP[t])*wDF$PPP0[(t-1)]
}
# Turnover
# For PPP
wDF$PPPTurn <- 0
for(t in (winSize+2):nrow(wDF)) {
Tt <- 0
for(i in 1:length(ctry)) {
Tt <- Tt + abs(wDF[t, paste("w", ctry[i], sep="")] -  wDF[(t-1), paste("w", ctry[i], sep="")])
}
wDF$PPPTurn[t] <- Tt
}
# For no shortsale PPP
wDF$PPP0Turn <- 0
for(t in (winSize+2):nrow(wDF)) {
Tt <- 0
for(i in 1:length(ctry)) {
Tt <- Tt + abs(wDF[t, paste("w0", ctry[i], sep="")] -  wDF[(t-1), paste("w0", ctry[i], sep="")])
}
wDF$PPP0Turn[t] <- Tt
}
plot(wDF$PPP0[winSize:nrow(wDF)], type="l")
wDF$PPP0[winSize:nrow(wDF)]
# The Lasso constraint
absVal <- c()
for(t in (winSize+1):nrow(wDF)) {
absVal <- c(absVal, sum(abs(wDF[t,3:54])))
}
plot(density(absVal, adjust=0.01))
plot(density(absVal, adjust=0.01))
# The ElasticNet Constraint
sqVal <- c()
for(t in (winSize+1):nrow(wDF)) {
sqVal <- c(sqVal, sum(wDF[t,3:54]^2))
}
plot(density(sqVal, adjust=0.01))
write.csv(file="wDFinal.csv", x=wDF, row.names=FALSE)
